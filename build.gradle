buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse' // Eclipse IDE 插件
    id 'idea' // IntelliJ IDEA 插件
    id 'maven-publish' // Maven 发布插件
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' // ForgeGradle 插件，指定版本范围
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_name // 设置归档名称
}

// Mojang 在 1.18+ 的 Minecraft 版本中使用 Java 17，因此你的模组应针对 Java 17。
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// 打印当前的 Java 和 JVM 版本信息
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    // 设置映射的频道和版本
    mappings channel: mapping_channel, version: mapping_version

    // 配置 Gradle 的 ProcessResources 任务在 IDE 输出位置运行（必须设置为 true）
    copyIdeResources = true

    runs {
        // 配置所有运行配置的默认设置
        configureEach {
            workingDirectory project.file('run') // 设置工作目录

            // 推荐的用户开发环境日志记录数据
            property 'forge.logging.markers', 'REGISTRIES' // 注册事件日志

            // 推荐的控制台日志记录级别
            property 'forge.logging.console.level', 'debug'

            // 设置加载游戏测试的命名空间
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main // 设置模组的源集
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id // 配置客户端运行配置
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id // 配置服务器运行配置
            args '--nogui' // 服务器无 GUI 模式
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id // 配置游戏测试服务器运行配置
        }

        data {
            workingDirectory project.file('run-data') // 指定数据生成的工作目录
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/') // 数据生成参数
        }
    }
}

// 包含由数据生成器生成的资源
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
    debug.export = true

}

repositories {
    //m/aven { url "https://cubicinterpolation.net/maven/" }
    // 在此处添加依赖项的 Maven 仓库
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}" // 指定使用的 Minecraft 版本
    implementation "org.spongepowered:mixin:0.8.5-SNAPSHOT" // 添加 Mixin 依赖项
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor' // Mixin
}

// 配置资源处理任务，以便在指定资源目标中扩展所有声明的替换属性
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project] // 在指定文件中扩展属性
    }
}

// 配置 JAR 任务，将属性添加到清单中以便在运行时读取
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // 规范版本
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ") // 时间戳
        ])
    }

    // 重新混淆 JAR 文件
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar // 使用 jar 任务生成的工件
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo" // 本地 Maven 仓库路径
        }
    }
}

// 设置 Java 编译的字符编码为 UTF-8
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
